<p>Biblioteka ZendY oferuje dwa rodzaje formularzy: 
<ul>
    <li>standardowe (<tt>ZendY\Form</tt>)</li> 
    <li>i bazodanowe (<tt>ZendY\Db\Form</tt>).</li>
</ul> 
Oba dziedziczą po klasie Zend_Form:
</p>
[file]../application/views/scripts/zendy/forms.svg[/file]

<p>Formularz standardowy <tt>ZendY\Form</tt> wprowadza następujące funkcjonalności:
<ol>
    <li>zarządzanie klasami oraz stylami css formularzy i podformularzy,</li>
    <li>walidacja ajaksowa elementów formularza,</li>
    <li>dodawanie zdefiniowanych kontenerów umożliwiających szybkie grupowanie elementów formularza,</li>
    <li>umieszczanie dedykowanych kontrolek pakietu <tt>ZendY\Form\Element</tt>.</li>
</ol>
Pierwsza funkcjonalność realizowana jest poprzez użycie cechy <tt>ZendY\Form\CssTrait</tt>. 
Dzięki niej obiekt formularza ma dostęp do następujących metod:
<ul>
    <li><tt>addClass($class)</tt> - dodaje pojedynczą klasę css do listy klas</li>
    <li><tt>addClasses(array $classes)</tt> - dodaje wiele klas css na raz</li>
    <li><tt>setClass($class)</tt> - ustawia klasę css (pojedynczą lub wiele) nadpisując istniejące</li>
    <li><tt>getClasses()</tt> - zwraca listę klas css</li>
    <li><tt>removeClass($class)</tt> - usuwa klasę css z listy klas</li>
    <li><tt>removeClasses(array $classes)</tt> - usuwa wiele klas css z listy klas</li>
    <li><tt>setStyle($property, $value)</tt> - ustawia wartość wybranej właściwości stylu css</li>
    <li><tt>getStyle($property)</tt> - zwraca wartość wybranej właściwości stylu css</li>
    <li><tt>removeStyle($property)</tt> - usuwa podaną właściwość stylu css</li>
    <li><tt>setWidth($value, $unit = 'px')</tt> - ustawia szerokość kontrolki przy użyciu stylu css. Jeśli wartość nie zostanie podana, szerokość zostanie zresetowana.</li>
    <li><tt>getWidth()</tt> - zwraca szerokość kontrolki. Wynikiem jest tablica dwuelementowa, gdzie pierwszym elementem jest wartość, drugim - jednostka.</li>
    <li><tt>setHeight($value, $unit = 'px')</tt> - ustawia wysokość kontrolki przy użyciu stylu css. Jeśli wartość nie zostanie podana, wysokość zostanie zresetowana.</li>
    <li><tt>getHeight()</tt> - zwraca wysokość kontrolki</li>
    <li><tt>setAlign($align)</tt> - pozycjonuje (wyrównuje) formularz względem innych kontenerów poprzez klasę css</li>
    <li><tt>getAlign()</tt> - zwraca klasę pozycjonowania</li>
    <li><tt>addAlignMargin($side, array $alignMargin)</tt> - dodaje margines absolutny do wybranego boku formularza przy użyciu stylu css</li>
</ul>
Nazwy klas css mogą być wpisywane ręcznie lub (jeśli są predefiniowane) wybierane z listy stałych klasy <tt>ZendY\Css</tt>:
[code]<?php
//zaokrągla wszystkie boki
$form->addClass(\ZendY\Css::CORNER_ALL);
//własny styl
$form->addClass('my-style');
[/code]
Formularze i kontenery możemy wyrównywać:
    <ul>
        <li>do lewej krawędzi:
[code]<?php
$form->setAlign(\ZendY\Css::ALIGN_LEFT);[/code]
        </li>
        <li>do prawej krawędzi:
[code]<?php
$form->setAlign(\ZendY\Css::ALIGN_RIGHT);[/code]
        </li>
        <li>do górnej krawędzi:
[code]<?php
$form->setAlign(\ZendY\Css::ALIGN_TOP);[/code]
    </li>
        <li>do dolnej krawędzi:
[code]<?php
$form->setAlign(\ZendY\Css::ALIGN_BOTTOM);[/code]
    </li>
        <li>do wszystkich krawędzi:
[code]<?php
$form->setAlign(\ZendY\Css::ALIGN_CLIENT);[/code]
    </li>
    </ul>
W każdym przypadku włączenie wyrównania ustawia pozycję absolutną.
</p>
<p>
    Poniżej przedstawiony jest przykład wykorzystania formularza standardowego do logowania użytkowników.
    [code][file]../application/forms/Auth.php[/file][/code]
</p>
<p>Formularz bazodanowy <tt>ZendY\Db\Form</tt>:
<ul>
    <li>dodaje obsługę kolejnych kontenerów,</li>
    <li>umożliwia korzystanie z kontrolek pakietu <tt>ZendY\Db\Form\Element</tt> połączonych z zewnętrznymi źródłami danych.</li>
</ul>
</p>
<p>
    Poniżej znajduje się przykład wykorzystania formularza bazodanowego do zarządzania rolami użytkowników.
    [code][file]../application/forms/Role.php[/file][/code]
</p>