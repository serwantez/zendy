<p>Jeśli pakiety Zend Framework oraz ZendX zostały poprawnie skonfigurowane w projekcie można przystąpić do instalacji ZendY.<br />
    Biblioteka ZendY została podzielona na dwie części. Część główną z kodem php należy dołączyć do projektu, np. do katalogu library, drugą cześć - z kodem css, js oraz plikami graficznymi - należy umieścić w publicznej części projektu, np. w katalogu public/library.<br />
    Należy pamiętać o wskazaniu położenia katalogu z obiema bibliotekami. Dla części serwerowej można to zrobić np. w pliku index.php:
    [code]<?php
defined('APPLICATION_PATH')
|| define('APPLICATION_PATH', realpath(dirname(__FILE__) . '/../application/'));

set_include_path(implode(PATH_SEPARATOR, array(
realpath(APPLICATION_PATH . '/../library'),
 get_include_path(),
)));
[/code]
</p>
Dla części "front-end'owej" kod dołączenia najlepiej umieścić w pliku layout.phtml
[code]<?php
echo $this->headLink()->appendStylesheet('/library/jquery-ui-1.10.2/themes/base/jquery.ui.all.css');

echo $this->jQuery()
->setLocalPath('/library/jquery-ui-1.10.2/jquery-1.9.1.js')
->setUiLocalPath('/library/jquery-ui-1.10.2/ui/jquery-ui.js')
->addJavascriptFile('/library/jquery-ui-1.10.2/globalize-master/lib/globalize.js')
->addJavascriptFile('/library/jquery-ui-1.10.2/globalize-master/lib/cultures/globalize.cultures.js')
->addJavascriptFile('/library/jquery-ui-1.10.2/ui/i18n/jquery-ui-i18n.js');
[/code]
Do poprawnego działania biblioteki niezbędne jest skonfigurowanie dostępu do bazy danych, ustawień poczty oraz przestrzeni nazw dla dołączonych bibliotek. Można to zrobić poprzez plik konfiguracyjny application.ini, np.:
<h2>ustawienia bazy danych</h2>
[code]resources.db.adapter = "pdo_mysql"
resources.db.params.host = "localhost"
resources.db.params.dbname = "pattern"
resources.db.params.username = "username"
resources.db.params.password = "password"
resources.db.params.charset = "utf8"
resources.db.isDefaultTableAdapter = true
[/code]
<h2>ustawienia poczty</h2>
[code]resources.mail.transport.type = "smtp"
resources.mail.transport.host = "smtp.gmail.com"
resources.mail.transport.auth = "login"
resources.mail.transport.username = "jankowalski"
resources.mail.transport.password = "password"
resources.mail.transport.ssl = "tls"
resources.mail.transport.port = 587
resources.mail.transport.register = true
resources.mail.defaultFrom.email = "jankowalski@gmail.com"
resources.mail.defaultFrom.name = "Jan Kowalski"
resources.mail.defaultReplyTo.email = "jankowalski@gmail.com"
resources.mail.defaultReplyTo.name = "Jan Kowalski"
[/code]
<h2>przestrzenie nazw</h2>
[code]autoloaderNamespaces[] = "ZendX"
autoloaderNamespaces[] = "ZendY"
autoloaderNamespaces[] = "Zend2"
autoloaderNamespaces[] = "Blueimp"
autoloaderNamespaces[] = "PHPExcel"
[/code]
<h2>pozostałe ustawienia (nieobowiązkowe)</h2>
[code]host = "81.82.81.842:8084"
author = "Jan Kowalski"
[/code]
Do zmiennej host można przypisać zewnętrzny adres ip serwera lub jego nazwę. Szczególnie dotyczy do przypadku, kiedy projekt jest testowany na lokalnym serwerze, a programista chce przetestować wysyłanie wiadomości pocztowych z linkami do zewnetrznej strony projektu.<br />
Pole author służy do automatycznego wstawiania imienia i nazwiska programisty, który generuje pliki kontrolera i akcji z poziomu swojego projektu.<br />
<br />
W kolejnym kroku umieszczamy w pliku Bootstrap.php instrukcje informujące o tym, gdzie znajdują się klasy pomocników widoku bibliotek ZendX i ZendY:
[code]<?php
protected function _initView() {
    $view = new Zend_View();
    $view->addHelperPath('ZendX/JQuery/View/Helper/', 'ZendX_JQuery_View_Helper');
    $view->addHelperPath('ZendY/View/Helper/', 'ZendY\View\Helper');
    
    $viewRenderer = new Zend_Controller_Action_Helper_ViewRenderer();
    $viewRenderer->setView($view);
    Zend_Controller_Action_HelperBroker::addHelper($viewRenderer);
}
[/code]
Ponadto można zmienić domyślne lokalizacje plików dla komponentów ZendY\Db\DataSource i Blueimp\Upload\Handler.
[code]<?php
protected function _initDefaults() {
    //nazwa kontrolera bazodanowego
    ZendY\Db\DataSource::$controller = '/data/';
    //folder pobieranych plików
    Blueimp\Upload\Handler::$uploadDir = 'application/images/uploaded/';
    //folder przechowywania miniatur
    Blueimp\Upload\Handler::$thumbnailDir = 'library/components/fileupload/server/php/thumbnails/';
}
[/code]
Jeśli baza danych, której parametry podaliśmy w pliku konfiguracyjnym application.ini jest pusta albo jeszcze nie istnieje, możemy skorzystać z narzędzia tworzącego bazę wraz z podstawową strukturą tabel:
[code]<?php
protected function _initMyDb() {
//pobranie adaptera bazy danych
    $this->bootstrap('db');
    $resource = $this->getPluginResource('db');
    $db = $resource->getDbAdapter();

//zapisanie adaptera bazy w rejestrze
    Zend_Registry::set('db', $db);

//sprawdzenie struktury bazy danych
    ZendY\Db\Mysql::verify($db);
}
[/code]
Powyższy kod wygeneruje m.in. tablicę użytkowników z kontem administratora. 
        Domyślna nazwa użytkownika i hasło: admin.